/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package otus.moryakovdv.meteoapi.web;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-17T10:23:01.411391794+03:00[Europe/Moscow]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "ProviderController", description = "the ProviderController API")
public interface ProviderApi {

    default ProviderApiDelegate getDelegate() {
        return new ProviderApiDelegate() {};
    }

    /**
     * POST /provider
     *
     * @return Все ОК (status code 200)
     *         or Неверные параметры (status code 400)
     *         or Что-то пошло не так (status code 500)
     */
    @Operation(
        operationId = "createProvider",
        tags = { "ProviderController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Все ОК"),
            @ApiResponse(responseCode = "400", description = "Неверные параметры"),
            @ApiResponse(responseCode = "500", description = "Что-то пошло не так")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/provider"
    )
    
    default ResponseEntity<Void> createProvider(
        
    ) {
        return getDelegate().createProvider();
    }


    /**
     * DELETE /provider/{providerId} : Удалить конкретного provider-а
     *
     * @param providerId ID providerId (required)
     * @return It works! (status code 200)
     *         or Что-то пошло не так (status code 500)
     */
    @Operation(
        operationId = "deleteProviderById",
        summary = "Удалить конкретного provider-а",
        tags = { "ProviderController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "It works!"),
            @ApiResponse(responseCode = "500", description = "Что-то пошло не так")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/provider/{providerId}"
    )
    
    default ResponseEntity<Void> deleteProviderById(
        @Parameter(name = "providerId", description = "ID providerId", required = true, in = ParameterIn.PATH) @PathVariable("providerId") List<Integer> providerId
    ) {
        return getDelegate().deleteProviderById(providerId);
    }


    /**
     * GET /provider/{providerId} : Загрузить конкретного provider-а
     *
     * @param providerId ID providerId (required)
     * @return It works! (status code 200)
     *         or Что-то пошло не так (status code 500)
     */
    @Operation(
        operationId = "loadProviderById",
        summary = "Загрузить конкретного provider-а",
        tags = { "ProviderController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "It works!"),
            @ApiResponse(responseCode = "500", description = "Что-то пошло не так")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/provider/{providerId}"
    )
    
    default ResponseEntity<Void> loadProviderById(
        @Parameter(name = "providerId", description = "ID providerId", required = true, in = ParameterIn.PATH) @PathVariable("providerId") List<Integer> providerId
    ) {
        return getDelegate().loadProviderById(providerId);
    }


    /**
     * GET /provider : Выгрузить всех provider-ов
     *
     * @return It works! (status code 200)
     *         or Что-то пошло не так (status code 500)
     */
    @Operation(
        operationId = "providerGet",
        summary = "Выгрузить всех provider-ов",
        tags = { "ProviderController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "It works!"),
            @ApiResponse(responseCode = "500", description = "Что-то пошло не так")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/provider"
    )
    
    default ResponseEntity<Void> providerGet(
        
    ) {
        return getDelegate().providerGet();
    }

}
